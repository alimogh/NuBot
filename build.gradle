/*
 * Copyright (C) 2014-2015 Nu Development Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

 /*
 * NuBot gradle build
 * see gradle.md for details on usage
 */

version = '0.15' //current project version

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceCompatibility = 1.7 // java version


repositories {
  maven { url "http://mvnrepository.com/artifact" }
  mavenCentral()
  flatDir {
       dirs 'NuBot/lib/nubot-dependancies'
   }
}

dependencies {

    compile 'commons-codec:commons-codec:1.7'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-logging:commons-logging:1.2'
    compile 'commons-net:commons-net:3.3' //note: 3.3., instead of 1.2.0
    compile 'com.alibaba:fastjson:1.1.36'
    compile 'com.google.code.gson:gson:2.2.3'
    compile 'org.apache.httpcomponents:httpclient:4.3.4'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.13'
    compile 'javax.mail:mail:1.4.4' //replaces mail.jar
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.jsoup:jsoup:1.7.3'
    compile 'commons-collections:commons-collections:3.2'
    compile 'org.codeartisans:org.json:20131017'

    //dependencies with develop branch
    compile 'org.zeromq:jeromq:0.3.4'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    
    compile files('NuBot/lib/EasyJccKit.jar')
        
    //dependencies for testing
    testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
    testCompile group: 'junit', name: 'junit', version: '4.+'

}

sourceSets {
    main {
        java {
            srcDir 'NuBot/src'
        }
    }

    test {
        java {
        srcDir 'NuBot/src/com/nubits/nubot/tests'
        }
    }
}

compileJava {
  //enable compilation in a separate daemon process
  options.fork = true

  //enable incremental compilation
  options.incremental = true
}


test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

//definitions
def storedir = new File("dist-packaged")
def logdir = new File("logs")
def jarname = "NuBot.jar"
def storejar = new File(storedir, jarname)
def mainclass = "com.nubits.nubot.launch.NuBot"



task compileReadme(type: Exec) {
  description 'compile the HTML readme'
  executable "sh"
  args "-c", "/bin/bash compileReadme.sh"
}

task init << {
    description 'init for build'
	dependsOn << compileReadme
	println "init build"
	
	if( !storedir.exists() ) {
    	println("creating storedir")

    	if(storedir.mkdirs()) {
	    	println("succeeded in creating " + storedir)
	    }
    } else  {
    	println("folder " + storedir + " exists. delete it")
    	delete storedir
    	if(storedir.mkdirs()) {
	    	println("succeeded in creating " + storedir)
	    }
    }    
    
    copy {
    	from "LICENSE.md"
    	into storedir
    }
    
    copy {
    	from "CHANGELOG.md"
    	into storedir
    }
    
    copy {
    	from "NuBot/res/ssl/nubot_keystore.jks" 
    	into "$storedir/res/ssl/"
    }

    copy {
    	from "NuBot/res/logs_assets" 
    	into "${storedir}/res/logs_assets/"
    }
    
	copy {
    	from "NuBot/res/currencies.csv" 
    	into "${storedir}/res/"
    }

	copy {
    	from "NuBot/src" 
    	into "${storedir}/res/sources/src"
    }

	copy {
    	from "readme.html" 
    	into "${storedir}/readme.html"
    }
        
	if( !logdir.exists() ) {
    	println("creating logdir")

    	if(logdir.mkdirs()) {
	    	println("succeeded in creating " + logdir)
	    }
    }         
   
	copy {
    	from "NuBot/res/logs_assets"
    	into "${storedir}/res/logs_assets"
    }
    
    delete "${store.dir}/res/sources/src/com/nubits/nubot/global/Passwords.java"
        
	//not needed    
	//<delete file="${store.dir}/NuBot_temp.jar"/>
	
}


task NuBotJar(type: Jar) {
    description 'create the jar in ' + project.file(storedir)
	dependsOn << init
    archiveName = "Nu.jar"
    destinationDir project.file(storedir)
    from (configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }){
    		exclude 'META-INF/MANIFEST.MF'
			exclude 'META-INF/*.SF'
			exclude 'META-INF/*.DSA'
			exclude 'META-INF/*.RSA'
    }
    with jar
    manifest.attributes("Main-Class":mainclass)
    //println 'jar created: ' + archivePath
}


task runCollector(type:JavaExec) {
   description 'run the collector service on a server'
   main = "com.nubits.nuservice.CollectService"
   classpath = sourceSets.main.runtimeClasspath
}
