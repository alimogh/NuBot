/*
 * Copyright (C) 2014-2015 Nu Development Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
* NuBot gradle build
* see gradle.md for details on usage
*/

apply plugin: 'java'
apply plugin: 'application'

version = '0.15'
targetCompatibility = 1.8
sourceCompatibility = 1.8 // java version


//Get dependencies from Maven central repository
repositories {
    mavenCentral()
    maven { url "http://mvnrepository.com/artifact" }
}

//definitions
def distdir = new File("dist")
def testdistdir = new File("testdist")
def builddir = new File("build")
def logdir = new File("logs")
def testreportdir = new File("testreports") //$buildDir/reports
def jarname = "NuBot.jar"
def mainclass = "com.nubits.nubot.launch.MainLaunch"
def maintestclass = "com.nubits.nubot.utils.LogLaunchUtil"
def uiclass = "com.nubits.nubot.webui.UiServer"


//Project dependencies
dependencies {

    //logging
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.codehaus.janino:janino:2.7.8' //for filtering

    compile 'org.apache.httpcomponents:httpclient:4.3.4'
    compile 'com.google.code.gson:gson:2.2.3'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'

    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.jsoup:jsoup:1.7.3'
    compile 'org.codeartisans:org.json:20131017'

    //compile 'commons-logging:commons-logging:1.2'
    compile 'commons-codec:commons-codec:1.7'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-net:commons-net:3.3'

    compile 'com.sun.mail:mailapi:1.5.2'
    compile 'javax.mail:mail:1.4.4' //replaces mail.jar
    compile 'com.sun.mail:smtp:1.5.2'
    compile 'io.evanwong.oss:hipchat-java:0.3.0'

    //webUI
    compile "javax.servlet:servlet-api:2.5"
    compile 'org.eclipse.jetty.aggregate:jetty-all:9.3.0.M1'

    compile 'com.sparkjava:spark-template-mustache:1.0.0'
    compile 'com.github.spullara.mustache.java:compiler:0.9.0'

    //static. no maven available
    compile files('lib/spark-core-2.2-SNAPSHOT.jar')
    compile files('lib/EasyJccKit.jar')
    compile files('lib/bitcoinapi-0.1.jar')

    //dependencies for testing
    testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
    testCompile group: 'junit', name: 'junit', version: '4.+'

    //compile 'org.zeromq:jeromq:0.3.4'
}


//use standard sourcesets, otherwise they can be defined like this
/*sourceSets {
    main {
        java {
            srcDir 'NuBot/src'
        }
        resources {
            srcDir 'NuBot/res'
        }
    }

    test {
        java {
            srcDir 'NuBot/tests'
        }
        resources {
            srcDir 'NuBot/res'
        }
    }
}*/

/*test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}*/


//create a single Jar with all dependencies
task NubotJar(type: Jar) {
    //baseName = project.name
    archiveName "NuBot.jar"
    destinationDir = distdir //file('${distdir}')

    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    manifest {
        attributes 'Main-Class': mainclass
    }
    with jar
}


task compiledocs(type: Exec) {
    description 'compile the HTML documents'
    executable "sh"
    args "-c", "cd md && /bin/bash compileall.sh"
}

task runUI(type: JavaExec) {
    description 'run the WebUI'
    main = "com.nubits.nubot.webui.UiServer"
    classpath = sourceSets.main.runtimeClasspath

    //store the output instead of printing to the console:
    /*standardOutput = new ByteArrayOutputStream()
    //obtain the output:
    ext.output = {
        return standardOutput.toStringSep()
    }*/
}

task testall(type: Test) {
    description 'test all'
    include '*/**'
    testall.reports.html.destination = file("${testreportdir}/alltests")
}

task testexchanges(type: Test) {
  description 'test all exchanges, includes ordering'
  include 'testexchanges/*'
  testexchanges.reports.html.destination = file("${testreportdir}/exchangetests")
}


//produce the ".nubot" file in distribution folder
//when run as jar NuBot will look for this file
task propfile << {
    def prop = new Properties()
    prop.put("version",project.version)

    //determine hash of current branch
    def proc = "git rev-parse HEAD".execute()
    def b = new StringBuffer()
    proc.consumeProcessErrorStream(b)
    def h = proc.text
    h = h.replace("\n","")
    prop.put("lastcommit",h);

    def propFile = new File("${distdir}/.nubot")
    propFile.createNewFile();
    prop.store(propFile.newWriter(), null);

    println 'this project is version ' + project.version
}

//TODO: copy html output to UI templates
/*task copyhtmltoui(type: copy){
    //<!DOCTYPE html><html lang="en"><head><meta charset="utf-8" /><title>README.md - Grip</title>

    //</body>
    //</html>
}*/

task cleanhtml << {
    FileCollection html_files = files('./md/readme.html', './md/setup.html', './md/feeds.html', './md/changelog.html', './md/gradle.html')

    html_files.each { File file ->
        println 'delete ' + file.name
        delete(file)
    }
}

task cleanall << {
    println 'clean all'
    delete builddir
    delete distdir
    delete testdistdir

    tasks.cleanhtml.execute()
}


