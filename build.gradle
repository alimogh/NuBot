/*
 * Copyright (C) 2014-2015 Nu Development Team
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/*
* NuBot gradle build
* see gradle.md for details on usage
*/

version = '0.15' //current project version

apply plugin: 'java'
apply plugin: 'application'
//apply plugin: 'idea'

sourceCompatibility = 1.8 // java version


repositories {
    maven { url "http://mvnrepository.com/artifact" }
    mavenCentral()
}

dependencies {

    compile 'commons-codec:commons-codec:1.7'
    compile 'commons-io:commons-io:2.4'
    compile 'commons-net:commons-net:3.3' //note: 3.3., instead of 1.2.0
    compile 'com.alibaba:fastjson:1.1.36'
    compile 'com.google.code.gson:gson:2.2.3'
    compile 'org.apache.httpcomponents:httpclient:4.3.4'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.13'
    compile 'com.sun.mail:mailapi:1.5.2'
    compile 'javax.mail:mail:1.4.4' //replaces mail.jar
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile 'org.jsoup:jsoup:1.7.3'
    compile 'org.codeartisans:org.json:20131017'
    compile 'commons-logging:commons-logging:1.2'
    compile 'com.sun.mail:smtp:1.5.2'

    compile 'io.evanwong.oss:hipchat-java:0.2.0'
    compile 'org.zeromq:jeromq:0.3.4'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'ch.qos.logback:logback-core:1.1.2'
    compile 'ch.qos.logback:logback-classic:1.1.2'
    compile 'org.codehaus.janino:janino:2.7.8' //for filtering

    //webUI
    compile "javax.servlet:servlet-api:2.5"
    compile 'org.eclipse.jetty.aggregate:jetty-all:9.3.0.M1'
    compile 'com.sparkjava:spark-core:2.1'
    compile 'com.sparkjava:spark-template-mustache:1.0.0'
    compile 'com.github.spullara.mustache.java:compiler:0.9.0'

    //static. no maven available
    compile files('NuBot/lib/EasyJccKit.jar')
    compile files('NuBot/lib/bitcoinapi-0.1.jar')

    //dependencies for testing
    testCompile group: 'org.testng', name: 'testng', version: '6.8.8'
    testCompile group: 'junit', name: 'junit', version: '4.+'

    //websocket
    //compile 'org.eclipse.jetty.websocket:websocket-server:9.3.0.M1'
    //compile 'org.eclipse.jetty:jetty-server:9.3.0.M1' //perhaps not needed - is in all
    //compile 'org.eclipse.jetty:jetty-servlet:9.3.0.M1'

}


sourceSets {
    main {
        java {
            srcDir 'NuBot/src'
        }
        resources {
            srcDir 'NuBot/res'
            //include '**/*.example'
            //exclude '**/*.DS_Store'
        }
    }

    test {
        java {
            srcDir 'NuBot/tests'
        }
        resources {
            srcDir 'NuBot/res'
        }
    }
}



compileJava {
    //enable compilation in a separate daemon process
    options.fork = true

    //enable incremental compilation
    options.incremental = true
}


test {
    reports {
        junitXml.enabled = false
        html.enabled = true
    }
}

//definitions
def distdir = new File("dist-packaged")
def testdistdir = new File("testdist-packaged")
def builddir = new File("build")
def logdir = new File("logs")
def jarname = "NuBot.jar"
def mainclass = "com.nubits.nubot.launch.MainLaunch"
def uiclass = "com.nubits.nubot.webui.UiServer"

def includeTestConfig = true


task compileReadme(type: Exec) {
    description 'compile the HTML readme'
    executable "sh"
    args "-c", "cd md && /bin/bash compileall.sh"
}


task initDist << {
    description 'init for build'
    println "init distribution"

    if (!distdir.exists()) {
        println("folder " + distdir + " exists. delete it")
        delete distdir
    }
    println("creating distdir")
    if (distdir.mkdirs()) {
        println("succeeded in creating " + distdir)
    }


    copy {
        from "NuBot/src/settings.properties"
        into "NuBot/res/"
    }

}

task initTestDist << {
    description 'init for testbuild'
    println "init testdistribution"

    if (testdistdir.exists()) {
        println("folder " + testdistdir + " exists. delete it")
        delete testdistdir
    }
    println("creating testdistdir")
    if (testdistdir.mkdirs()) {
        println("succeeded in creating " + testdistdir)
    }

    copy {
        from "NuBot/src/settings.properties"
        into "NuBot/res/"
    }

}


task NuBotJar(type: Jar)  {
    description 'create the NuBotjar'

    destinationDir = distdir
    archiveName = 'NuBot.jar'

    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    manifest {
        attributes "Main-Class": mainclass
    }
    //println 'generated jar: ' + jar.archivePath
    with jar
}

task TestNuBotJar(type: Jar)  {
    description 'create the TestNuBotjar'

    destinationDir = testdistdir
    archiveName = 'NuBot.jar'

    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
    }
    manifest {
        attributes "Main-Class": mainclass
    }
    //println 'generated jar: ' + jar.archivePath
    with jar
}

/*task TestNuBotJar << {
    tasks.NuBotJar.execute()
    copy {
        from  tasks.NuBotJar.archivePath
        into "${testdistdir}"
    }
    copy {
        from "testconfig/poloniex.json"
        into "${testdistdir}"
    }
}*/


task NuBotDist(dependsOn: compileReadme) << {
    description 'make NuBot distribution folder'

    println 'start making distribution'
    tasks.initDist.execute()

    //println 'delete ${distdir}'
    //delete "${distdir}"
    tasks.NuBotJar.execute()
    println 'copy for distribution'
    tasks.copyDist.execute()


    println "finish distribution"

    if (includeTestConfig) {
        copy {
            from "testconfig/test.json"
            into "${distdir}"
        }
    }

}

task TestDist(dependsOn: compileReadme) << {
    description 'make NuBot test distribution'

    println 'start making test distribution'
    tasks.initTestDist.execute()

    tasks.NuBotJarTest.execute()
    println 'copy for test distribution'
    tasks.copyDistTest.execute()

    println "finish distribution"

    tasks.cleanhtml.execute()

    if (includeTestConfig) {
        copy {
            from "testconfig/test.json"
            into "${testdistdir}"
        }
    }

}


task runUI(type: JavaExec) {
    description 'run the WebUI'
    main = "com.nubits.nubot.webui.UiServer"
    classpath = sourceSets.main.runtimeClasspath

    //store the output instead of printing to the console:
    /*standardOutput = new ByteArrayOutputStream()
    //obtain the output:
    ext.output = {
        return standardOutput.toStringSep()
    }*/
}

task testExchanges(type: Test) {
  // explicitly include or exclude tests
  include 'NuBot/testexchanges/*'
  //include 'components/**'
  //include 'integration/**'
  //exclude 'components/TestStartStop**'
}


task copyDist(type: Copy) << {
    println 'copy dist'
    FileCollection html_files = files('readme.html', 'setup.html', 'feeds.html', 'changelog.html')

    html_files.each { File file ->
        println file.name
        copy {
            from "md/" + file.name
            into "${distdir}/"
        }
        delete(file)
    }

    if (!logdir.exists()) {
        println("creating logdir")

        if (logdir.mkdirs()) {
            println("succeeded in creating " + logdir)
        }
    }

    copy {
        from "Nubot/res/options/sample-config"
        into "${distdir}/sample-config"
    }

    copy {
        from "NuBot/src"
        into "${distdir}/res/sources"
    }

    copy {
        from "NuBot/res/logs_assets"
        into "${distdir}/res/logs_assets"
    }

    copy {
        from "NuBot/res/currencies.csv"
        into "${distdir}/res"
    }

    copy {
        from "NuBot/res/ssl"
        into "${distdir}/res/ssl"
        exclude 'listCertificates.sh'
    }


    delete "${distdir}/res/sources/src/com/nubits/nubot/global/Passwords.java"

}


task copyDistTest(type: Copy) << {
    println 'testdist copy'
    FileCollection html_files = files('readme.html', 'setup.html', 'feeds.html', 'changelog.html')

    html_files.each { File file ->
        println file.name
        copy {
            from "md/" + file.name
            into "${testdistdir}/"
        }
        delete(file)
    }

    copy {
        from "Nubot/res/options/sample-config"
        into "${testdistdir}/sample-config"
    }

    copy {
        from "NuBot/src"
        into "${testdistdir}/res/sources"
    }

    copy {
        from "NuBot/res/logs_assets"
        into "${testdistdir}/res/logs_assets"
    }

    copy {
        from "NuBot/res/currencies.csv"
        into "${testdistdir}/res"
    }

    copy {
        from "NuBot/res/ssl"
        into "${testdistdir}/res/ssl"
        exclude 'listCertificates.sh'
    }


    delete "${testdistdir}/res/sources/src/com/nubits/nubot/global/Passwords.java"

}

task cleanhtml << {
    FileCollection html_files = files('./md/readme.html', './md/setup.html', './md/feeds.html', './md/changelog.html')

    html_files.each { File file ->
        println 'delete ' + file.name
        delete(file)
    }
}

task cleanall << {
    println 'clean all'
    delete testdistdir
    delete builddir
    delete distdir

    tasks.cleanhtml.execute()
}

/*
task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}
 */